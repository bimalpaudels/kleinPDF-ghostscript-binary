name: Extract Ghostscript Binaries from Homebrew

on:
  workflow_dispatch:

jobs:
  extract-ghostscript:
    strategy:
      matrix:
        include:
          - arch: arm64
            runner: macos-latest
          - arch: x86_64
            runner: macos-13
    runs-on: ${{ matrix.runner }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Get Ghostscript version from Homebrew
      id: get_version
      run: |
        # Get the version that Homebrew would install
        GS_VERSION=$(brew info ghostscript --json | jq -r '.[0].versions.stable')
        echo "Homebrew Ghostscript version: $GS_VERSION"
        echo "gs_version=$GS_VERSION" >> $GITHUB_OUTPUT

    - name: Install Ghostscript via Homebrew
      run: |
        brew install ghostscript

    - name: Extract and package Ghostscript binary
      run: |
        # Get Homebrew prefix for current architecture
        BREW_PREFIX=$(brew --prefix)
        
        # Work in /tmp to avoid any path conflicts
        cd /tmp
        
        # Create package directory
        mkdir -p ghostscript-${{ matrix.arch }}
        
        # Copy the main gs binary
        cp "$BREW_PREFIX/bin/gs" ghostscript-${{ matrix.arch }}/gs
        
        # Copy essential shared libraries that gs depends on
        mkdir -p ghostscript-${{ matrix.arch }}/lib
        
        # Get dynamic library dependencies
        otool -L "$BREW_PREFIX/bin/gs" | grep "$BREW_PREFIX" | awk '{print $1}' | while read lib; do
          if [ -f "$lib" ]; then
            cp "$lib" ghostscript-${{ matrix.arch }}/lib/
          fi
        done
        
        # Copy Ghostscript resource files using rsync to avoid cycles
        if [ -d "$BREW_PREFIX/share/ghostscript" ]; then
          mkdir -p ghostscript-${{ matrix.arch }}/share
          rsync -a "$BREW_PREFIX/share/ghostscript/" ghostscript-${{ matrix.arch }}/share/ghostscript/
        fi
        
        # Verify architecture
        echo "Binary architecture info:"
        file ghostscript-${{ matrix.arch }}/gs
        lipo -info ghostscript-${{ matrix.arch }}/gs || true
        
        # Verify Ghostscript structure
        echo "Verifying Ghostscript structure:"
        ls -la ghostscript-${{ matrix.arch }}/share/ghostscript/*/Resource/Init/ | head -5 || echo "Resource/Init directory not found"
        if [ -f ghostscript-${{ matrix.arch }}/share/ghostscript/*/Resource/Init/gs_init.ps ]; then
          echo "✅ gs_init.ps found in correct location"
        else
          echo "❌ gs_init.ps not found in expected location"
          find ghostscript-${{ matrix.arch }} -name "gs_init.ps" -type f || echo "gs_init.ps not found anywhere"
        fi
        
        # Create a wrapper script with correct paths
        cat > ghostscript-${{ matrix.arch }}/gs-wrapper.sh << 'EOF'
        #!/bin/bash
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        export DYLD_LIBRARY_PATH="$SCRIPT_DIR/lib:$DYLD_LIBRARY_PATH"
        # Point to Resource/Init instead of lib
        GS_VERSION_DIR="$SCRIPT_DIR/share/ghostscript/$(ls "$SCRIPT_DIR/share/ghostscript" 2>/dev/null | head -1)"
        export GS_LIB="$GS_VERSION_DIR/Resource/Init"
        exec "$SCRIPT_DIR/gs" "$@"
        EOF
        chmod +x ghostscript-${{ matrix.arch }}/gs-wrapper.sh
        
        # Create tar.gz package
        tar -czf ghostscript-${{ steps.get_version.outputs.gs_version }}-macos-${{ matrix.arch }}.tar.gz ghostscript-${{ matrix.arch }}/
        
        # Move back to workspace for artifact upload
        mv ghostscript-${{ steps.get_version.outputs.gs_version }}-macos-${{ matrix.arch }}.tar.gz $GITHUB_WORKSPACE/

    - name: Test extracted binary
      run: |
        # Test that the extracted binary works
        cd /tmp/ghostscript-${{ matrix.arch }}
        ./gs-wrapper.sh --version || echo "Direct version check failed, this is expected without full setup"
        ./gs-wrapper.sh -h || echo "Help command failed, this is expected without full setup"

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ghostscript-${{ steps.get_version.outputs.gs_version }}-macos-${{ matrix.arch }}
        path: ghostscript-${{ steps.get_version.outputs.gs_version }}-macos-${{ matrix.arch }}.tar.gz
        retention-days: 90

  create-release:
    needs: extract-ghostscript
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Get Ghostscript version
      id: get_version
      run: |
        # Extract version from artifact name
        VERSION=$(ls artifacts/ | head -1 | sed 's/ghostscript-\(.*\)-macos-.*/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ghostscript-${{ steps.get_version.outputs.version }}
        name: Ghostscript ${{ steps.get_version.outputs.version }} macOS Binaries
        body: |
          Ghostscript ${{ steps.get_version.outputs.version }} binaries for macOS
          
          Built from Homebrew packages:
          - `ghostscript-${{ steps.get_version.outputs.version }}-macos-arm64.tar.gz` - Apple Silicon (M1/M2/M3)
          - `ghostscript-${{ steps.get_version.outputs.version }}-macos-x86_64.tar.gz` - Intel processors
          
          Each package includes:
          - `gs` - Ghostscript binary
          - `gs-wrapper.sh` - Wrapper script with proper library paths
          - Required shared libraries and resource files
          
          Usage: Extract and run `./gs-wrapper.sh` instead of `gs` directly.
        files: ./artifacts/**/*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

