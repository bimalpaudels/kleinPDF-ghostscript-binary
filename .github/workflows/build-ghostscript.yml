name: Build Ghostscript from Source

on:
  workflow_dispatch:

jobs:
  build-ghostscript:
    strategy:
      matrix:
        include:
          - arch: arm64
            runner: macos-latest
            target: macos-arm64
          - arch: x86_64
            runner: macos-13
            target: macos-x86_64
    runs-on: ${{ matrix.runner }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
    
    - name: Install build dependencies
      run: |
        # Install Xcode command line tools
        xcode-select --install || true
        
        # Install autoconf if needed
        brew install autoconf || true


    - name: Build Ghostscript from source
      id: build
      run: |
        # Run the build script with CI optimizations
        python3 build_ghostscript.py --cleanup
        
        # Get the built binary
        if [ ! -f "./bin/ghostscript" ]; then
          echo "❌ Ghostscript binary not found after build"
          exit 1
        fi
        
        # Get version from binary
        GS_VERSION=$(./bin/ghostscript --version 2>/dev/null | head -1 | awk '{print $3}' || echo "10.05.1")
        echo "Built Ghostscript version: $GS_VERSION"
        echo "gs_version=$GS_VERSION" >> $GITHUB_OUTPUT
        
        # Create package directory
        mkdir -p ghostscript-${{ matrix.arch }}
        
        # Copy the binary (already standalone)
        cp ./bin/ghostscript ghostscript-${{ matrix.arch }}/gs
        
        # Verify architecture
        echo "Binary architecture info:"
        file ghostscript-${{ matrix.arch }}/gs
        lipo -info ghostscript-${{ matrix.arch }}/gs || true
        
        # Test the binary
        echo "Testing binary:"
        ./ghostscript-${{ matrix.arch }}/gs --version 2>/dev/null || echo "Version check completed"
        
        # Create tar.gz package
        tar -czf ghostscript-${GS_VERSION}-${{ matrix.target }}.tar.gz ghostscript-${{ matrix.arch }}/

    - name: Upload binary artifact
      id: upload
      uses: actions/upload-artifact@v4
      with:
        name: ghostscript-${{ steps.build.outputs.gs_version }}-${{ matrix.target }}
        path: ghostscript-${{ steps.build.outputs.gs_version }}-${{ matrix.target }}.tar.gz
        retention-days: 90

  create-release:
    needs: build-ghostscript
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Get Ghostscript version
      id: get_version
      run: |
        # Debug: List all artifacts
        echo "Available artifacts:"
        ls -la artifacts/ || echo "No artifacts directory found"
        
        # Extract version from artifact name with fallback
        if [ -d "artifacts/" ] && [ "$(ls artifacts/ | wc -l)" -gt 0 ]; then
          ARTIFACT_NAME=$(ls artifacts/ | head -1)
          echo "First artifact: $ARTIFACT_NAME"
          VERSION=$(echo "$ARTIFACT_NAME" | sed 's/ghostscript-\(.*\)-macos-.*/\1/')
        else
          # Fallback to hardcoded version if artifacts are missing
          VERSION="10.05.1"
          echo "No artifacts found, using fallback version: $VERSION"
        fi
        
        # Validate version format
        if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format: $VERSION, using fallback"
          VERSION="10.05.1"
        fi
        
        echo "Final version: $VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ghostscript-${{ steps.get_version.outputs.version }}
        name: Ghostscript ${{ steps.get_version.outputs.version }} macOS Binaries
        body: |
          Ghostscript ${{ steps.get_version.outputs.version }} binaries for macOS
          
          Built from source with optimizations:
          - `ghostscript-${{ steps.get_version.outputs.version }}-macos-arm64.tar.gz` - Apple Silicon (M1/M2/M3)
          - `ghostscript-${{ steps.get_version.outputs.version }}-macos-x86_64.tar.gz` - Intel processors
          
          Each package includes:
          - `gs` - Standalone Ghostscript binary (no dependencies)
          
          Features:
          - Built from source with 3GB RAM disk optimization for GitHub Mac runners
          - Fully static binary with all dependencies included
          - Optimized build flags (-O3 -march=native)
          - No external dependencies (psutil removed)
          
          Usage: Extract and run `./gs` directly.
        files: ./artifacts/**/*.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

