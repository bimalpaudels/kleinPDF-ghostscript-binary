name: Extract Ghostscript Binaries from Homebrew

on:
  workflow_dispatch:

jobs:
  extract-ghostscript:
    strategy:
      matrix:
        include:
          - arch: arm64
            runner: macos-latest
          - arch: x86_64
            runner: macos-13
    runs-on: ${{ matrix.runner }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Get Ghostscript version from Homebrew
      id: get_version
      run: |
        # Get the version that Homebrew would install
        GS_VERSION=$(brew info ghostscript --json | jq -r '.[0].versions.stable')
        echo "Homebrew Ghostscript version: $GS_VERSION"
        echo "gs_version=$GS_VERSION" >> $GITHUB_OUTPUT

    - name: Install Ghostscript via Homebrew
      run: |
        brew install ghostscript

    - name: Extract and package Ghostscript binary
      run: |
        # Get Homebrew prefix for current architecture
        BREW_PREFIX=$(brew --prefix)
        
        # Work in /tmp to avoid any path conflicts
        cd /tmp
        
        # Create package directory
        mkdir -p ghostscript-${{ matrix.arch }}
        
        # Copy the main gs binary
        cp "$BREW_PREFIX/bin/gs" ghostscript-${{ matrix.arch }}/gs
        
        # Copy essential shared libraries that gs depends on
        mkdir -p ghostscript-${{ matrix.arch }}/lib
        
        # Get dynamic library dependencies
        otool -L "$BREW_PREFIX/bin/gs" | grep "$BREW_PREFIX" | awk '{print $1}' | while read lib; do
          if [ -f "$lib" ]; then
            cp "$lib" ghostscript-${{ matrix.arch }}/lib/
          fi
        done
        
        # Copy Ghostscript resource files using rsync to avoid cycles
        if [ -d "$BREW_PREFIX/share/ghostscript" ]; then
          mkdir -p ghostscript-${{ matrix.arch }}/share
          rsync -a "$BREW_PREFIX/share/ghostscript/" ghostscript-${{ matrix.arch }}/share/ghostscript/
        fi
        
        # Verify architecture
        echo "Binary architecture info:"
        file ghostscript-${{ matrix.arch }}/gs
        lipo -info ghostscript-${{ matrix.arch }}/gs || true
        
        # Create a simple wrapper script to set library paths
        cat > ghostscript-${{ matrix.arch }}/gs-wrapper.sh << 'EOF'
        #!/bin/bash
        SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
        export DYLD_LIBRARY_PATH="$SCRIPT_DIR/lib:$DYLD_LIBRARY_PATH"
        export GS_LIB="$SCRIPT_DIR/share/ghostscript/$(ls "$SCRIPT_DIR/share/ghostscript" 2>/dev/null | head -1)/lib"
        exec "$SCRIPT_DIR/gs" "$@"
        EOF
        chmod +x ghostscript-${{ matrix.arch }}/gs-wrapper.sh
        
        # Create tar.gz package
        tar -czf ghostscript-${{ steps.get_version.outputs.gs_version }}-macos-${{ matrix.arch }}.tar.gz ghostscript-${{ matrix.arch }}/
        
        # Move back to workspace for artifact upload
        mv ghostscript-${{ steps.get_version.outputs.gs_version }}-macos-${{ matrix.arch }}.tar.gz $GITHUB_WORKSPACE/

    - name: Test extracted binary
      run: |
        # Test that the extracted binary works
        cd /tmp/ghostscript-${{ matrix.arch }}
        ./gs-wrapper.sh --version || echo "Direct version check failed, this is expected without full setup"
        ./gs-wrapper.sh -h || echo "Help command failed, this is expected without full setup"

    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ghostscript-${{ steps.get_version.outputs.gs_version }}-macos-${{ matrix.arch }}
        path: ghostscript-${{ steps.get_version.outputs.gs_version }}-macos-${{ matrix.arch }}.tar.gz
        retention-days: 90

